using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


/*
 * -----------------------------------Assignment no :: 2 DAY 2---------------------------------------------------
 *
 *
 * Create an Employee class with the following details
Properties
----------
int EmpNo - autogenerated, readonly
string Name - no blanks
decimal Basic - abstract property
short DeptNo - must be > 0
Methods
-------
decimal CalcNetSalary() - abstract method

Create Manager class which inherits from Employee
Properties
----------
int ProjectId - must be > 0

Create Clerk class which inherits from Employee
Properties
----------
int OvertimeHours - must be > 0

Create GeneralManager class which inherits from Manager
Properties
----------
string Perks - no validations

CREATE CONSTRUCTORS THAT TAKE MULTIPLE ARGUMENTS AND PASS ON VALUES TO THEIR RESPECTIVE BASE CLASSES.
ALL CLASSES MUST IMPLEMENT THE IDbFunctions interface.
----------------------------------------------------------------------------------------------------
*/
namespace Assignment_of_the_day
{
    class Program
    {
        static void Main(string[] args)
        {
            employee emp1 = new GeneralManager("shivaji", 150000, 2, 100,"Congratulations");
            Console.WriteLine(emp1);
            employee emp2 = new Manager("shashi", 200000, 3, 10);
            Console.WriteLine(emp2);

            employee emp3 = new clerk("shivani", 40000000, 1, 3);
            Console.WriteLine(emp3);

            //-------calculating next salary of clerk--------------
            Console.WriteLine("\nsalary of "+ emp3.Name+" incremented to:::"+emp3.calNextSalary()+"\n\n\n");
            Console.WriteLine("------------------------------------------------------");
            Console.WriteLine("\ncalling insert delete update (IdbFunction)::");
            Console.WriteLine("------------------------------------------------------");

            emp3.insert();
            emp3.delete();
            emp3.update();
            Console.WriteLine("------------------------------------------------------");
            emp2.insert();
            emp2.delete();
            emp2.update();
            Console.WriteLine("------------------------------------------------------");
            emp1.insert();
            emp1.delete();
            emp1.update();


            Console.ReadLine();
        }
    }
    public abstract class employee:IdbFunction
    {
        private int empno;
        private string name;
        protected decimal basic;
        private short deptno;


        public int Empno                //read only auto_generated
        {
            get
            {
                return empno;
            }
        }
        public string Name
        {
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    Console.WriteLine("invalid name");
                    Console.ReadLine();
                    System.Environment.Exit(10);
                }
                else
                {
                    name = value;
                }
            }
            get
            {
                return name;
            }
        }

        public abstract decimal Basic
        {
            set;
            get;
        }

        public short Deptno
        {
            set
            {
                if (value < 0)
                {
                    Console.WriteLine("Invalid deptno for " + Name);
                    Console.ReadLine();
                    System.Environment.Exit(10);
                }
                else
                {
                    deptno = value;

                }
            }
            get
            {
                return deptno;
            }
        }

        public employee(string Name = "default_name", decimal Basic = 10000, short Deptno = 1)
        {
            employee2.empno_inc++;
            empno = employee2.Empno_inc;
            this.Name = Name;
            this.Deptno = Deptno;

        }
        public abstract decimal calNextSalary();
        public abstract void insert();
        public abstract void delete();
        public abstract void update();
    }
    
}
